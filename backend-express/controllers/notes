import Note from '../models/Note';
import errorHandler from '../utils/errorHandler';
import cuid from 'cuid';

const NoteController = {};

// Retrieve and return all notes from the database.
NoteController.getAllNotes = async (req, res) =>  {
  try {
    await Note.find()
      .then(notes => {
        res.send(notes);
      })
  } catch (err) {
    errorHandler(res, err);
  }
};

// Create and Save a new Note
NoteController.createNote = async (req, res) => {
  let { title, content } = req.body;

  try {
    // Validate request
    if(!content) {
      return res.status(400).send({
        message: "Note content can not be empty"
      });
    }

    // Create a Note
    const newCUID = cuid();
    const newNote = new Note ({
      title: title || 'Untitled Note',
      content: content,
      cuid: newCUID
    });

    // Save Note in the database
    await newNote.save()
      .then(data => {
      res.send(data);
    })
  } catch (err) {
    errorHandler(res, err);
  }
};

// Find a single note with a noteId
NoteController.getNoteByID = async (req, res) => {
  let { cuid }  = req.params;
  try {
    Note.findOne({ cuid: cuid})
      .then(note => {
       res.send(note);
    });
  } catch (err) {
    errorHandler(res, err);
  }
};

// Update a note identified by the noteId in the request
NoteController.updateNote = async (req, res) => {
  let  { cuid } = req.params;
  let { title, content } = req.body;

  try {
    // Find note and update it with the request body
    await Note.findOneAndUpdate({ cuid: cuid }, {
      title: title || 'Untitled Note',
      content: content
    }, {new: true})
      .then(note => {
        res.send(note);
      })
  } catch (err) {
    errorHandler(res, err);
  }
};

NoteController.deleteNote = async (req, res) => {
  let { cuid } = req.params;

  try {
     await Note.findOneAndRemove({ cuid: cuid })
       .then(() => {
         res.send({message:"Note deleted successfully!"});
    })
  } catch (err) {
    errorHandler(res, err);
  }
};

export default NoteController;